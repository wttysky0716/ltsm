{"ast":null,"code":"import \"C:\\\\Users\\\\\\u5434\\u5929\\u7FFC\\\\log-analysis-system\\\\frontend\\\\node_modules\\\\core-js\\\\modules\\\\es.array.iterator.js\";\nimport \"C:\\\\Users\\\\\\u5434\\u5929\\u7FFC\\\\log-analysis-system\\\\frontend\\\\node_modules\\\\core-js\\\\modules\\\\es.promise.js\";\nimport \"C:\\\\Users\\\\\\u5434\\u5929\\u7FFC\\\\log-analysis-system\\\\frontend\\\\node_modules\\\\core-js\\\\modules\\\\es.object.assign.js\";\nimport \"C:\\\\Users\\\\\\u5434\\u5929\\u7FFC\\\\log-analysis-system\\\\frontend\\\\node_modules\\\\core-js\\\\modules\\\\es.promise.finally.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport Vue from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport store from './store';\nimport ElementUI from 'element-ui';\nimport 'element-ui/lib/theme-chalk/index.css';\nimport './assets/styles/main.css';\nVue.use(ElementUI, {\n  size: 'medium'\n});\nVue.config.productionTip = false;\n\n// 添加请求拦截器，为每个请求添加token\nimport axios from 'axios';\n\n// 创建axios实例\nvar http = axios.create({\n  baseURL: '/api',\n  timeout: 60000\n});\n\n// 请求拦截器\nhttp.interceptors.request.use(function (config) {\n  var token = store.state.token;\n  if (token) {\n    config.headers['Authorization'] = \"Bearer \".concat(token);\n  }\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nhttp.interceptors.response.use(function (response) {\n  return response.data;\n}, function (error) {\n  console.error('API Error:', error);\n\n  // 只在有明确的401状态码时才登出\n  if (error.response && error.response.status === 401) {\n    console.log('认证失败，退出登录');\n    store.dispatch('logout');\n\n    // 只有在用户不在登录页时，才跳转到登录页\n    if (router.currentRoute.path !== '/login') {\n      router.push('/login');\n    }\n  }\n  return Promise.reject(error);\n});\nVue.prototype.$http = http;\n\n// 设置默认语言为中文\nVue.prototype.$ELEMENT = {\n  size: 'medium',\n  zIndex: 3000\n};\nnew Vue({\n  router: router,\n  store: store,\n  render: function render(h) {\n    return h(App);\n  }\n}).$mount('#app');","map":{"version":3,"names":["Vue","App","router","store","ElementUI","use","size","config","productionTip","axios","http","create","baseURL","timeout","interceptors","request","token","state","headers","concat","error","Promise","reject","response","data","console","status","log","dispatch","currentRoute","path","push","prototype","$http","$ELEMENT","zIndex","render","h","$mount"],"sources":["C:/Users/吴天翼/log-analysis-system/frontend/src/main.js"],"sourcesContent":["import Vue from 'vue'\r\nimport App from './App.vue'\r\nimport router from './router'\r\nimport store from './store'\r\nimport ElementUI from 'element-ui'\r\nimport 'element-ui/lib/theme-chalk/index.css'\r\nimport './assets/styles/main.css'\r\n\r\nVue.use(ElementUI, { size: 'medium' })\r\n\r\nVue.config.productionTip = false\r\n\r\n// 添加请求拦截器，为每个请求添加token\r\nimport axios from 'axios'\r\n\r\n// 创建axios实例\r\nconst http = axios.create({\r\n  baseURL: '/api',\r\n  timeout: 60000\r\n})\r\n\r\n// 请求拦截器\r\nhttp.interceptors.request.use(\r\n  config => {\r\n    const token = store.state.token\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`\r\n    }\r\n    return config\r\n  },\r\n  error => {\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 响应拦截器\r\nhttp.interceptors.response.use(\r\n  response => {\r\n    return response.data\r\n  },\r\n  error => {\r\n    console.error('API Error:', error);\r\n    \r\n    // 只在有明确的401状态码时才登出\r\n    if (error.response && error.response.status === 401) {\r\n      console.log('认证失败，退出登录');\r\n      store.dispatch('logout')\r\n      \r\n      // 只有在用户不在登录页时，才跳转到登录页\r\n      if (router.currentRoute.path !== '/login') {\r\n        router.push('/login')\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nVue.prototype.$http = http\r\n\r\n// 设置默认语言为中文\r\nVue.prototype.$ELEMENT = { size: 'medium', zIndex: 3000 }\r\n\r\nnew Vue({\r\n  router,\r\n  store,\r\n  render: h => h(App)\r\n}).$mount('#app') "],"mappings":";;;;;;AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,GAAG,MAAM,WAAW;AAC3B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAO,sCAAsC;AAC7C,OAAO,0BAA0B;AAEjCJ,GAAG,CAACK,GAAG,CAACD,SAAS,EAAE;EAAEE,IAAI,EAAE;AAAS,CAAC,CAAC;AAEtCN,GAAG,CAACO,MAAM,CAACC,aAAa,GAAG,KAAK;;AAEhC;AACA,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,IAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAAC;EACxBC,OAAO,EAAE,MAAM;EACfC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAH,IAAI,CAACI,YAAY,CAACC,OAAO,CAACV,GAAG,CAC3B,UAAAE,MAAM,EAAI;EACR,IAAMS,KAAK,GAAGb,KAAK,CAACc,KAAK,CAACD,KAAK;EAC/B,IAAIA,KAAK,EAAE;IACTT,MAAM,CAACW,OAAO,CAAC,eAAe,CAAC,aAAAC,MAAA,CAAaH,KAAK,CAAE;EACrD;EACA,OAAOT,MAAM;AACf,CAAC,EACD,UAAAa,KAAK,EAAI;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAV,IAAI,CAACI,YAAY,CAACS,QAAQ,CAAClB,GAAG,CAC5B,UAAAkB,QAAQ,EAAI;EACV,OAAOA,QAAQ,CAACC,IAAI;AACtB,CAAC,EACD,UAAAJ,KAAK,EAAI;EACPK,OAAO,CAACL,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;;EAElC;EACA,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;IACnDD,OAAO,CAACE,GAAG,CAAC,WAAW,CAAC;IACxBxB,KAAK,CAACyB,QAAQ,CAAC,QAAQ,CAAC;;IAExB;IACA,IAAI1B,MAAM,CAAC2B,YAAY,CAACC,IAAI,KAAK,QAAQ,EAAE;MACzC5B,MAAM,CAAC6B,IAAI,CAAC,QAAQ,CAAC;IACvB;EACF;EAEA,OAAOV,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAEDpB,GAAG,CAACgC,SAAS,CAACC,KAAK,GAAGvB,IAAI;;AAE1B;AACAV,GAAG,CAACgC,SAAS,CAACE,QAAQ,GAAG;EAAE5B,IAAI,EAAE,QAAQ;EAAE6B,MAAM,EAAE;AAAK,CAAC;AAEzD,IAAInC,GAAG,CAAC;EACNE,MAAM,EAANA,MAAM;EACNC,KAAK,EAALA,KAAK;EACLiC,MAAM,EAAE,SAARA,MAAMA,CAAEC,CAAC;IAAA,OAAIA,CAAC,CAACpC,GAAG,CAAC;EAAA;AACrB,CAAC,CAAC,CAACqC,MAAM,CAAC,MAAM,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}